package net.satcy.util{	import flash.events.MouseEvent;	import flash.utils.Dictionary;	/*		@author satoshi@rhizomatiks.com				addEventListener(MouseEvent........)を書き並べるのを簡素にするクラス				@how to		import net.satcy.util.MouseEventUtil;				MouseEventUtil.init();		///初期化するとき		MouseEventUtil.adds(test_mc, true, {out:onOut, over:onOver, click:onClick});		///追加:out, over, click		MouseEventUtil.removes(test_mc);		///削除：MCからリスナー削除				@method init():void		@method adds(*, Boolean, Object):void		@method removes(*):void		@method destroy():void	*/	public class MouseEventUtil{				public static var dict:Dictionary = new Dictionary(true);				public static function init():void{			//初期化するとき			for(var i in dict){				removes(i);			}			dict = new Dictionary(true);		}				public static function adds(__mc:*, __bool:Boolean, __funcs:Object):void{			//@param * リスナー追加対象のDisplayObject			//@param Boolean buttonModeの変更			//@param Object 例えば、{out:func0, over:func1, click:func2}			if(dict[__mc] != null) removes(__mc);			dict[__mc] = __funcs;			addOn(__mc, __bool, __funcs);		}				public static function removes(__mc:*):void{			if(dict[__mc] == null) return;			removeOn(__mc);			delete dict[__mc];		}		protected static function addOn(__mc:*, __bool:Boolean, __funcs:Object):void{			if (__funcs["mouse_out"] != null) add(__mc, MouseEvent.MOUSE_OUT, __funcs["mouse_out"]);			if (__funcs["mouse_over"] != null) add(__mc, MouseEvent.MOUSE_OVER, __funcs["mouse_over"]);			if (__funcs["out"] != null) add(__mc, MouseEvent.ROLL_OUT, __funcs["out"]);			if (__funcs["over"] != null) add(__mc, MouseEvent.ROLL_OVER, __funcs["over"]);			if (__funcs["click"] != null) add(__mc, MouseEvent.CLICK, __funcs["click"]);			if (__funcs["click2"] != null) add(__mc, MouseEvent.DOUBLE_CLICK, __funcs["click2"]);			if (__funcs["down"] != null) add(__mc, MouseEvent.MOUSE_DOWN, __funcs["down"]);			if (__funcs["up"] != null) add(__mc, MouseEvent.MOUSE_UP, __funcs["up"]);			if ( __mc.hasOwnProperty("buttonMode") ) __mc.buttonMode = __bool;		}		protected static function removeOn(__mc:*):void{			if(dict[__mc] == null) return;			if (dict[__mc]["mouse_out"] != null) remove(__mc, MouseEvent.MOUSE_OUT, dict[__mc]["mouse_out"]);			if (dict[__mc]["mouse_over"] != null) remove(__mc, MouseEvent.MOUSE_OVER, dict[__mc]["mouse_over"]);			if (dict[__mc]["out"] != null) remove(__mc, MouseEvent.ROLL_OUT, dict[__mc]["out"]);			if (dict[__mc]["over"] != null) remove(__mc, MouseEvent.ROLL_OVER, dict[__mc]["over"]);			if (dict[__mc]["click"] != null) remove(__mc, MouseEvent.CLICK, dict[__mc]["click"]);			if (dict[__mc]["click2"] != null) remove(__mc, MouseEvent.DOUBLE_CLICK, dict[__mc]["click2"]);			if (dict[__mc]["down"] != null) remove(__mc, MouseEvent.MOUSE_DOWN, dict[__mc]["down"]);			if (dict[__mc]["up"] != null) remove(__mc, MouseEvent.MOUSE_UP, dict[__mc]["up"]);			__mc.buttonMode = false;		}		///--------------------------------------------------------------------------------private				private static function add(__mc:*, __type:String, __func:Function):void{			__mc.addEventListener(__type, __func, false, 0, true);		}				private static function remove(__mc:*, __type:String, __func:Function):void{			__mc.removeEventListener(__type, __func);		}	}	}