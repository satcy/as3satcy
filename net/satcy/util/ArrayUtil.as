package net.satcy.util{		public class ArrayUtil{		public static function numItems(__arr:Array, __item:*):uint{			//ある__itemが配列の中にいくつあるかカウント			var num:int = 0;			for each ( var item:* in __arr){				if( item == __item) num++;			}			return num;		}						public static function deleteItems(__arr:Array, ...items):Array{			//オリジナルに変更は無い			var a:Array = copy(__arr);			var l:int = items.length;			var _index:int;			for( var j:int = 0; j<l; j++ ){				_index = a.indexOf(items[j]);				while ( _index != -1 ) {					a.splice(_index, 1);					_index = a.indexOf(items[j]);				}			}			return a;		}				public static function deleteItemsByArray(__arr:Array, items:Array):Array{			//オリジナルに変更は無い			var a:Array = copy(__arr);			var l:int = items.length;			var _index:int;			for( var j:int = 0; j<l; j++ ){				_index = a.indexOf(items[j]);				while ( _index != -1 ) {					a.splice(_index, 1);					_index = a.indexOf(items[j]);				}			}			return a;		}				public static function deleteNotItemsByArray(__arr:Array, items:Array):Array{			//オリジナルに変更は無い			var a:Array = copy(__arr);			var num:int = -1;			var offset_index:int = 0;			var l:int = items.length;			var _indexs:Array = [];			for(var i:* in a){				for( var j:int = 0; j<l; j++ ){					if(a[i] == items[j]) {						_indexs.push(i);					}				}			}			var a_2:Array = [];			for( i in _indexs){				a_2.push(a[_indexs[i]]);			}			return a_2;		}				public static function shuffle(__arr:Array):Array{			//オリジナルに変更無し。			var a:Array = [];			var temp:Array = copy(__arr);			while (temp.length > 0){				var index:int = Math.random() * temp.length;				a.push(temp[index]);				temp.splice(index, 1);			}			return a;		}				public static function unique(__arr:Array):Array{			//オリジナルに変更無し。			var l:int = __arr.length;			var a:Array = [];			var i:int = 0;			var item:*;			for(i=0; i<l; i++){				item = __arr[i];				if ( a.indexOf(item) == -1 ) {					a.push(item);				}			}			return a;		}						public static function addAt(__arr:Array, index:int, _val:*):void{			//指定インデクスに追加			__arr.splice(index, 0, _val);		}				public static function deleteAt(__arr:Array, index:int):void{			//指定インデクスを削除			__arr.splice(index, 1);		}				public static function copy(__arr:Array):Array{			return new Array().concat( __arr );		}				public static function reverse(_arr:Array):Array{			//オリジナルに変更無し。			return copy(_arr).reverse();		}				public static function fold(_arr:Array):Number{			//Array内の数値の加算			var i:int, l:int = _arr.length;			var cnt:Number = 0;			for ( i=0; i<l; i++ ){				cnt += (_arr[i] is Number ) ? _arr[i] : 0;			}			return cnt;		}				public static function generateNumbers(_num_0:int, _num_1:int):Array{			//_num_0から、_num_1までの数値の配列			var a:Array = [];			var l:int = _num_1 - _num_0 + 1;			for ( var i:int = 0; i<l; i++ ){				a.push( _num_0 + i );			}			return a;		}				public static function resize(_a:Array, _num:int):Array{			//Numberの配列長を、補完しつつ変更する。オリジナルは変更しない			var a:Array = [];			var i:int;			var j:int;			var nl:Number = _a.length;			var idx:int;			var l:int = _num*nl;			var cr:Number = nl/(l);						var n_0:Number = _a[0];			var n_1:Number = n_0;			for ( i = 0; i<nl; i++ ){				n_1 = _a[(i+1 > nl-1) ? nl-1 : i+1];				n_0 = _a[i];				for ( j=0; j<_num; j++ ){					a.push( n_0 + j*((n_1 - n_0)/(_num)) );				}			}			var a2:Array = [];			for ( i = 0; i<_num; i++ ){				idx = int(i*nl);				if ( idx > a.length-1 ) idx = a.length-1; 				a2[i] = a[idx];			}			a = null;			return a2;		}	}				   }