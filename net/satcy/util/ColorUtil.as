package net.satcy.util{		public class ColorUtil {		/** RGBからHSBをつくる         * @param r 色の赤色成分(0〜255)         * @param g 色の緑色成分(0〜255)         * @param b 色の青色成分(0〜255)         * @return HSB配列([0]=hue, [1]=saturation, [2]=brightness)         */        public static function RGBtoHSB(r:int, g:int, b:int):Array {            var cmax:Number = Math.max(r, g, b);            var cmin:Number = Math.min(r, g, b);            var brightness:Number = cmax / 255.0;            var hue:Number = 0;            var saturation:Number = (cmax != 0) ? (cmax - cmin) / cmax : 0;            if (saturation != 0) {                var redc:Number = (cmax - r) / (cmax - cmin);                var greenc:Number = (cmax - g) / (cmax - cmin);                var bluec:Number = (cmax - b) / (cmax - cmin);                if (r == cmax) {                    hue = bluec - greenc;                } else if (g == cmax) {                    hue = 2.0 + redc - bluec;                } else {                    hue = 4.0 + greenc - redc;                }                hue = hue / 6.0;                if (hue < 0) {                    hue = hue + 1.0;                }            }            return [hue, saturation, brightness];        }				/** HSBからRGBをつくる         * @param hue 色の色相成分(小数部 * 360度が色相角度)         * @param saturation 色の彩度(0.0 〜 1.0 の範囲の数)         * @param brightness 色の明度(0.0 〜 1.0 の範囲の数)         * @return RGBカラー         */        public static function HSBtoRGB(hue:Number, saturation:Number, brightness:Number):uint {            var r:int = 0;            var g:int = 0;            var b:int = 0;            if (saturation == 0) {                r = g = b = brightness * 255.0 + 0.5;            } else {                var h:Number = (hue - Math.floor(hue)) * 6.0;                var f:Number = h - Math.floor(h);                var p:Number = brightness * (1.0 - saturation);                var q:Number = brightness * (1.0 - saturation * f);                var t:Number = brightness * (1.0 - (saturation * (1.0 - f)));                switch (int(h)) {                case 0:                    r = brightness * 255.0 + 0.5;                    g = t * 255.0 + 0.5;                    b = p * 255.0 + 0.5;                    break;                case 1:                    r = q * 255.0 + 0.5;                    g = brightness * 255.0 + 0.5;                    b = p * 255.0 + 0.5;                    break;                case 2:                    r = p * 255.0 + 0.5;                    g = brightness * 255.0 + 0.5;                    b = t * 255.0 + 0.5;                    break;                case 3:                    r = p * 255.0 + 0.5;                    g = q * 255.0 + 0.5;                    b = brightness * 255.0 + 0.5;                    break;                case 4:                    r = t * 255.0 + 0.5;                    g = p * 255.0 + 0.5;                    b = brightness * 255.0 + 0.5;                    break;                case 5:                    r = brightness * 255.0 + 0.5;                    g = p * 255.0 + 0.5;                    b = q * 255.0 + 0.5;                    break;                }            }            return (r << 16) | (g << 8) | (b << 0);        }				public static function hexAdd(_col:uint, _rr:int, _gg:int, _bb:int):uint{			var _r:int = _col >> 16 & 0xFF;			var _g:int = _col >> 8 & 0xFF;			var _b:int = _col & 0xFF;			_r += _rr;			if ( _r < 0 ) _r = 0;			if ( _r > 255 ) _r = 255;						_g += _gg;			if ( _g < 0 ) _g = 0;			if ( _g > 255 ) _g = 255;						_b += _bb;			if ( _b < 0 ) _b = 0;			if ( _b > 255 ) _b = 255;			return _r << 16 | _g << 8 | _b;		}				public static function hexByHSB(_col:uint, _hue:Number, _sat:Number, _bright:Number):uint{			var _r:int = _col >> 16 & 0xFF;			var _g:int = _col >> 8 & 0xFF;			var _b:int = _col & 0xFF;			var _hsb:Array = RGBtoHSB(_r, _g, _b);			_hsb[0] += _hue;			_hsb[1] += _sat;			_hsb[2] += _bright;			for ( var i:int = 1; i<3; i++ ) {				if ( _hsb[i] < 0 ) _hsb[i] = 0;				if ( _hsb[i] > 1 ) _hsb[i] = 1;			}			return HSBtoRGB(_hsb[0], _hsb[1], _hsb[2]);		}	}				   }