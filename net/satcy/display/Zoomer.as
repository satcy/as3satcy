package net.satcy.display{	import flash.display.*;	import flash.events.*;	import flash.utils.*;		import caurina.transitions.Tweener;		import StageResize;	import net.satcy.display.ZoomerCursor;		public class Zoomer{		private var sr:StageResize = new StageResize(resizeExec);		private var t_mc:*;		private var w,h;		private var w_min:Boolean;		private var min_scale:Number;		private var now_scale:Number;		private var biging:Boolean = true;		private var o_w,o_h:int;		private var max_zoom:int;				private var interval_1:uint;		private var cancel_click:Boolean = false;		private var down_x:Number;		private var down_y:Number;				private var zc:ZoomerCursor;				public function Zoomer(mc:*, _max_zoom:int, _zc:ZoomerCursor = null){						t_mc = mc;			max_zoom = _max_zoom;						o_w = t_mc.width;			o_h = t_mc.height;					resizeExec();						t_mc.addEventListener(MouseEvent.CLICK, onClickHandler);			t_mc.addEventListener(MouseEvent.MOUSE_DOWN, onDownHandler);			t_mc.addEventListener(MouseEvent.MOUSE_UP, onUpHandler);						zc = _zc;			if(zc!=null){				t_mc.addEventListener(MouseEvent.ROLL_OVER, overHandler);				t_mc.addEventListener(MouseEvent.ROLL_OUT, outHandler);				zc.zoomerOver();			}					}		private function overHandler(e:MouseEvent):void{			if(zc!=null) zc.zoomerOver();		}		private function outHandler(e:MouseEvent):void{			if(zc!=null) zc.zoomerOut();		}		private function onClickHandler(e:MouseEvent):void{			if(!cancel_click){				clearTimeout(interval_1);								var n_scale:Number;				if(biging){					n_scale = now_scale*2;				}else{					n_scale = now_scale/2;				}				if(n_scale>=max_zoom){					biging = (biging) ? false : true;					n_scale = max_zoom;					if(zc!=null) zc.zoomerIcnChage(1);				}				if(n_scale<=min_scale){					biging = (biging) ? false : true;					n_scale = min_scale;					if(zc!=null) zc.zoomerIcnChage(0);				}								var n_x:Number = Math.max(t_mc.mouseX*n_scale - w*0.5, 0);				var n_y:Number = Math.max(t_mc.mouseY*n_scale - h*0.5, 0);								var min_x:Number = w - o_w*n_scale;				var min_y:Number = h - o_h*n_scale;				n_x = Math.min(n_x, -min_x);				n_y = Math.min(n_y, -min_y);								Tweener.addTween(t_mc, {x:-n_x, y:-n_y, scaleX:n_scale, scaleY:n_scale, time:1});				now_scale = n_scale;			}		}				private function onDownHandler(e:MouseEvent){			down_x = StageReference.stage.mouseX;			down_y = StageReference.stage.mouseY;						clearTimeout(interval_1);			interval_1 = setTimeout(cancelClickBool, 300, true);					}		private function cancelClickBool(bool:Boolean){			cancel_click = bool;			if(bool){				t_mc.addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);				t_mc.buttonMode = true;								if(zc!=null) zc.zoomerIcnChage(2);			}else{				if(biging){					if(zc!=null) zc.zoomerIcnChage(0);				}else{					if(zc!=null) zc.zoomerIcnChage(1);				}			}					}		private function onEnterFrameHandler(e:Event){			trace(t_mc.mouseX - down_x);			var n_x:Number = t_mc.x + (StageReference.stage.mouseX - down_x)*now_scale*0.1;			var n_y:Number = t_mc.y + (StageReference.stage.mouseY - down_y)*now_scale*0.1;						var min_x:Number = w - o_w*now_scale;			var min_y:Number = h - o_h*now_scale;						n_x = (n_x<min_x) ? min_x : n_x;			n_x = (n_x>0) ? 0 : n_x;			n_y = (n_y<min_y) ? min_y : n_y;			n_y = (n_y>0) ? 0 : n_y;									//Tweener.addTween(t_mc, {x:n_x, y:n_y, time:1});			t_mc.x = n_x;			t_mc.y = n_y;						//down_x = t_mc.mouseX;			//down_y = t_mc.mouseY;		}				private function onUpHandler(e:MouseEvent){			clearTimeout(interval_1);			interval_1 = setTimeout(cancelClickBool, 300, false);			t_mc.removeEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			t_mc.buttonMode = false;		}				public function rmove(){			sr.destroy();			t_mc.removeEventListener(MouseEvent.CLICK, onClickHandler);			t_mc.removeEventListener(MouseEvent.MOUSE_DOWN, onDownHandler);			t_mc.removeEventListener(MouseEvent.MOUSE_UP, onUpHandler);			if(zc!=null){				t_mc.removeEventListener(MouseEvent.ROLL_OVER, overHandler);				t_mc.removeEventListener(MouseEvent.ROLL_OUT, outHandler);				zc = null;			}			t_mc = null;			delete this;		}				private function wMinCheck(){			if(w/h > o_w/o_h){				w_min = true;			}else{				w_min = false;			}		}				private function resizeExec(){			w = StageReference.stageWidth;			h = StageReference.stageHeight;						wMinCheck();						var t_x:Number;			var t_y:Number;						if(w_min){				min_scale = w/o_w;				t_x = (w - o_w*min_scale)*0.5;				t_y = (h - o_h*min_scale)*0.5;			}else{				min_scale = h/o_h;				t_x = (w - o_w*min_scale)*0.5;				t_y = (h - o_h*min_scale)*0.5;			}			now_scale = min_scale;			Tweener.addTween(t_mc, {x:t_x, y:t_y, scaleX:min_scale, scaleY:min_scale, time:1});		}						}				}