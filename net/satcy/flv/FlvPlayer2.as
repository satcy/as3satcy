package net.satcy.flv{	import caurina.transitions.properties.SoundShortcuts;		import flash.display.Sprite;	import flash.events.*;	import flash.geom.Rectangle;	import flash.media.*;	import flash.net.*;	import flash.utils.*;	public class FlvPlayer2 extends Sprite{				private var videoURL:String;        private var connection:NetConnection;        private var stream:NetStream;		private var my_video:Video;				//private var sound:Sound;		private var w:int = 400;		private var h:int = 300;				private var _smooth:Boolean = true;						private var loaded_interval:uint;				private var time_interval:uint;				public var total_time:Number = 0;		public var time:Number = 0;				public var bufferTime:Number = 1;				private var isFirstBuff:Boolean = false;		private var isFirstSize:Boolean = false;				public var isPlaying:Boolean = false;		public var isEnd:Boolean = false;				public var loop:Boolean = false;				public var autoStart:Boolean = true;				private var my_vol:Number = 2;				public var reuseOnLoop:Boolean = true;				public function FlvPlayer2(){			SoundShortcuts.init();		}				public function getFLV(v_url:String, ww:int = 0, hh:int = 0, _uri:String = ""):void{			closeConnection();			time = 0;			w = ww;			h = hh;			videoURL = v_url;			connection = new NetConnection();			//connection.objectEncoding = 0;			connection.client = this;            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            connection.objectEncoding = ObjectEncoding.AMF3;            connection.connect( (_uri == "") ? null : _uri);            trace("fms_uri :::  "+connection.uri, "file_name ::: "+v_url);            isEnd = false;            isFirstBuff = false;            isFirstSize = false;            			//this.addEventListener(Event.REMOVED_FROM_STAGE, removed, false, 0, true);		}        private function netStatusHandler(event:NetStatusEvent):void {        	//trace(event.info.code);            switch (event.info.code) {                case "NetConnection.Connect.Success":                    connectStream();                    dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_BUFF_EMPTY) );                    break;                case "NetStream.Play.StreamNotFound":                    //trace("Unable to locate video: " + videoURL);                    break;				case "NetStream.Play.Stop":					if ( connection.uri == "null" ){						isEnd = true;						dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_COMPLETE) );						if ( loop ) setPlay();					}					//stream.seek(0);				case "NetStream.Buffer.Full":					if ( !isFirstBuff ){						isFirstBuff = true;						dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_BUFF_FIRST_FULL) );					}					dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_BUFF_FULL) );					break;				case "NetStream.Buffer.Empty":					dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_BUFF_EMPTY) );					break;				case "NetStream.Seek.Notify":					dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_SEEK) );					break;            }        }		        private function connectStream():void {        	if ( !connection ) return;			connection.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);            connection.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);						stream = new NetStream(connection);			//stream.checkPolicyFile = true;            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			stream.client = this;			stream.bufferTime = bufferTime;			setVol(my_vol);                                    if ( my_video != null && this.contains( my_video ) ){            	removeChild( my_video );            	my_video.clear();            	my_video = null;            }            my_video = new Video(1024, 576);            my_video.attachNetStream(stream);            my_video.smoothing = _smooth;                        if ( !this.contains( my_video ) ){				addChild(my_video);            }                        //addChild(my_video);			            if ( !(w == 0 && h == 0) ){            	my_video.width = w;            	my_video.height = h;            }            time = 0;            	        stream.play(videoURL);			isPlaying = true;				//stream.seek(0);			if ( !autoStart ) {				stream.pause();            }            			clearInterval(loaded_interval);			loaded_interval = setInterval(checkBytesLoaded, 33, stream);						clearInterval(time_interval);			time_interval = setInterval(sendTime, 100);        }				private function checkBytesLoaded(my_ns:NetStream):void {			var pctLoaded:Number = Math.round(my_ns.bytesLoaded / my_ns.bytesTotal * 100.0);			if (pctLoaded >= 1 || isNaN( pctLoaded )) {				clearInterval(loaded_interval);				//firstPlay();				//trace(my_ns.bytesLoaded, my_ns.bytesTotal);				if ( !isNaN( pctLoaded ) ) {					loaded_interval = setInterval(checkBytesLoaded2, 33, stream);				}			}		}				private function checkBytesLoaded2(my_ns:NetStream):void {			var pctLoaded:Number = Math.round(my_ns.bytesLoaded / my_ns.bytesTotal * 100.0);			this.dispatchEvent(new FlvPlayerEvent(FlvPlayerEvent.ON_LOAD_PROGRESS, pctLoaded));			//trace(my_ns.bytesLoaded, my_ns.bytesTotal);			//trace(pctLoaded);			if (pctLoaded >= 99) {				clearInterval(loaded_interval);				dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_LOAD_COMPLETE) );			}		}						private function firstPlay():void{//使ってない			isPlaying = true;			resumeFLV();			clearInterval(loaded_interval);			loaded_interval = setInterval(sendTime, 33);			/*			if ( DisplayObjectUtils.isExistChild( this, my_video ) ){				removeChild(my_video);            }			if ( !DisplayObjectUtils.isExistChild( this, my_video ) ){				addChild(my_video);            }*/            //trace("flv startttt");			dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_PLAY, true ) );		}						private function sendTime():void{//使ってない			time = stream.time;			if ( total_time == 0 ) return;			var timeRatio:Number = stream.time/total_time;			dispatchEvent(new FlvPlayerEvent(FlvPlayerEvent.ON_TIME, timeRatio));			/*			if(stream.time/total_time >= 1){							}			*/		}				public function getTimeRatio():Number{			if ( !stream ) return 0;			return stream.time/total_time;		}				public function getTime():Number{			if ( !stream ) return 0;			return stream.time;		}				public function set smooth(_bool:Boolean):void{			if ( my_video != null ) my_video.smoothing = _bool;			_smooth = _bool;		}				public function get smooth():Boolean{ return _smooth; }				public function resumeFLV():void{			if ( stream != null ) stream.resume();		}				public function pauseFLV():void{			if ( stream != null ) stream.pause();		}				public function setTime(__num:Number):void{			if ( stream != null ) stream.seek(__num*total_time);		}				public function setTimeByTime(__num:Number):void{			if ( stream != null ) stream.seek(__num);		}				public function setPlay():int{			if( stream == null ) return -1;			if( isEnd ){				if ( reuseOnLoop ) {					stream.pause();					stream.seek(0);					stream.resume();				} else{					stream.play(videoURL, 0);				}				//stream.resume();				isPlaying = true;				isEnd = false;				return 1;			}else{				if( !isPlaying ) {					stream.resume();					isPlaying = true;					return 1;				}else{					stream.pause();					isPlaying = false;					return 0;				}			}		}				public function setVol(__num:Number):void{			my_vol = (isNaN(__num)) ? 1 : __num;			if ( stream == null ) return;			stream.soundTransform = new SoundTransform( my_vol, 0);			//var _vol:Number = (isNaN(__num)) ? 1 : __num;			//Tweener.addTween(stream, {_sound_volume:_vol, time:0.5, transition:"linear"});		}				public function set _setVol(__num:Number):void{			my_vol = (isNaN(__num)) ? 1 : __num;			if ( stream == null ) return;			stream.soundTransform = new SoundTransform( my_vol, 0);		}		public function get _setVol():Number{			return my_vol;		}				public function get nowVideoURL():String{			return this.videoURL;		}								public function destroy():void{			closeConnection();			removeDisplayChildren(this);			if(my_video != null){				my_video.clear();				my_video = null;			}			this.videoURL = null;		}				public function clearLoadedInterval():void {			clearInterval(loaded_interval);		}				public function restartLoadedInterval():void {			clearInterval(loaded_interval);			loaded_interval = setInterval(checkBytesLoaded, 1, stream);		}		/////------------------------------------------------------------------------private		private function closeConnection():void{			clearInterval(time_interval);			clearInterval(loaded_interval);			if(connection != null){				connection.close();				connection.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);				connection.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);				connection = null;			}			if(stream != null){				stream.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);				stream.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);				stream.close();				stream = null;			}						dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_CLOSE) );		}				private function rectSprite(_w:Number, _h:Number):Sprite{			var _sp:Sprite = new Sprite();			_sp.graphics.beginFill(0x000000, 1);			_sp.graphics.drawRect(0,0,_w,_h);			return _sp;		}						private function removeDisplayChildren(_mc:*):void{			var mc:* = _mc;			var c_num:int = mc.numChildren;			if(c_num>0){				for(var i:int = 0;i<c_num;i++){					mc.removeChildAt(0);				}			}		}        private function securityErrorHandler(event:SecurityErrorEvent):void {            trace("securityErrorHandler: " + event);        }                private function asyncErrorHandler(event:AsyncErrorEvent):void {            // ignore AsyncErrorEvent events.        }                                        public function onBWDone():void{        	        }                                public function onPlayStatus(info:Object):void {        	//trace("onPlayStatus-------------------------------");			for(var i:* in info ){				//trace(i + ":::" + info[i]);			}			if( info.code == "NetStream.Play.Complete" ){				isEnd = true;				dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_COMPLETE) );				if ( loop ) setPlay();			}			//trace("-------------------------------");		}		public function onXMPData(info:Object):void{			/*			for(var i:* in info ){				trace(i + ":::" + info[i]);			}*/		}		public function onMetaData(info:Object):void {			total_time = info.duration;			if ( isFirstSize ) return;			isFirstSize = true;			//trace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);			if ( w == 0 && h == 0 ){				my_video.width = info.width;				my_video.height = info.height;			}									this.dispatchEvent( new FlvPlayerEvent(FlvPlayerEvent.ON_SIZE, new Rectangle(0,0,info.width,info.height) ) );		}		public function onCuePoint(info:Object):void {			//trace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);		}	}	}