package net.satcy.datb{	import jp8027.async.AbstractTask;	import flash.display.*;	import flash.events.*;    import flash.net.URLRequest;	import flash.utils.*;		public class LoadTask extends AbstractTask{				private var loader:Loader;		private var filePath:String;		public function LoadTask(__filePath:String){			filePath = __filePath;		}				override public function execute():void {			if(AssetPocket.loadedCheck(filePath)){				dispatchComplete();				var r:ProgressEvent = new ProgressEvent (ProgressEvent.PROGRESS);				r.bytesLoaded = 100;				r.bytesTotal = 100;				dispatchEvent (r);///ダミーイベント送出			}else{				loader = new Loader();				configureListeners(loader.contentLoaderInfo);				loader.load(new URLRequest(filePath));			}		}		/*		中断しません		止まりません		*/				private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler, false, 0, true);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler, false, 0, true);            dispatcher.addEventListener(Event.INIT, initHandler, false, 0, true);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler, false, 0, true);            dispatcher.addEventListener(Event.OPEN, openHandler, false, 0, true);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler, false, 0, true);            dispatcher.addEventListener(Event.UNLOAD, unLoadHandler, false, 0, true);        }				private function removeListeners(dispatcher:IEventDispatcher):void {            dispatcher.removeEventListener(Event.COMPLETE, completeHandler);            dispatcher.removeEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.removeEventListener(Event.INIT, initHandler);            dispatcher.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);            dispatcher.removeEventListener(Event.OPEN, openHandler);            dispatcher.removeEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.removeEventListener(Event.UNLOAD, unLoadHandler);        }        private function completeHandler(event:Event = null):void {            trace("completeHandler: " + event.target);			removeListeners(loader.contentLoaderInfo);			AssetPocket.loadedStore(filePath, loader);			loader = null;			dispatchComplete();        }		private function httpStatusHandler(event:HTTPStatusEvent):void {            //trace("httpStatusHandler: " + event);        }        private function initHandler(event:Event):void {            //trace("initHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);            completeHandler();        }        private function openHandler(event:Event):void {            //trace("openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            //trace("progressHandler: bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);			var r:ProgressEvent = new ProgressEvent (ProgressEvent.PROGRESS);			r.bytesLoaded = event.bytesLoaded;			r.bytesTotal = event.bytesTotal;			dispatchEvent (r);///イベント送出        }        private function unLoadHandler(event:Event):void {            //trace("unLoadHandler: " + event);        }	}}