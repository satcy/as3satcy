package net.satcy.bitmap{	import flash.display.*;	import flash.events.*;	import flash.geom.*;	public class ScanSlicerNaname extends Sprite{		private var target_mc:*;		private var bmd_0:BitmapData;		private var bmd:BitmapData;		private var bm:Bitmap;				private var t_w:Number = 0;		private var t_h:Number = 0;		private var n_w:Number = 0;				private var neo_wh:Number;				private var inc_x:int;						private var onCompleteFunc:Function;		public function ScanSlicerNaname(t_mc:*, inc:int, fn:Function){			target_mc = t_mc;			inc_x = inc;			onCompleteFunc = fn;						t_w = target_mc.width;			t_h = target_mc.height;			trace(target_mc.width+"**************"+target_mc.height);			neo_wh = (t_w + t_h)/Math.sqrt(2);			trace(neo_wh);						bmd_0 = new BitmapData(neo_wh, neo_wh, true, 0x00000000);			bmd = new BitmapData(neo_wh, neo_wh, true, 0x00000000);			bm = new Bitmap(bmd, "auto", true);						var myMatrix:Matrix = new Matrix();			myMatrix.scale(target_mc.scaleX, target_mc.scaleY);			myMatrix.rotate(Math.PI/4.);			myMatrix.translate(t_h/Math.sqrt(2), 0);						bmd_0.draw(target_mc, myMatrix);						bm.rotation = -45;			bm.x = -(t_h/2);			bm.y = t_h/2;						addChild(bm);						var mask_mc:Shape = new Shape();			mask_mc.graphics.beginFill(0x000000, 1);			mask_mc.graphics.drawRect(0, 0, t_w, t_h);			mask_mc.graphics.endFill();			bm.mask = mask_mc;			addChild(mask_mc);						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler, false, 0, true);			addEventListener(Event.REMOVED_FROM_STAGE, removeHandler, false, 0, true);		}		private function onEnterFrameHandler(e:Event):void{			var rect:Rectangle = new Rectangle(n_w, 0, 1, neo_wh);			var pt:Point = new Point(n_w, 0);			for(var i:int=0;i<inc_x;i++){				rect = new Rectangle(n_w+i, 0, 1, neo_wh);				pt = new Point(n_w+i, 0);				bmd.copyPixels(bmd_0, rect, pt);			}			var bmd_temp:BitmapData = new BitmapData(1, neo_wh, true, 0x00000000);			bmd_temp.copyPixels(bmd_0, rect, new Point(0,0));			var myMatrix:Matrix = new Matrix();			var scale_x:Number = (neo_wh-n_w);						myMatrix.scale(scale_x, 1);			myMatrix.translate(n_w + inc_x, 0);			bmd.draw(bmd_temp, myMatrix, new ColorTransform(),"normal", new Rectangle(n_w, 0, neo_wh, neo_wh), true);						if(n_w>neo_wh){				bmd.dispose();				bmd_0.dispose();				bm = null;				removeEventListener(Event.ENTER_FRAME, onEnterFrameHandler);				onCompleteFunc();			}else{				n_w += inc_x;			}		}		private function removeHandler(e:Event):void{			onCompleteFunc = new Function();			removeEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			removeEventListener(Event.REMOVED_FROM_STAGE, removeHandler);			bmd.dispose();			bmd_0.dispose();			bm = null;			target_mc = null;			removeDisplayChildren(this);		}		private function removeDisplayChildren(_mc:*){			var mc:* = _mc;			var c_num:int = mc.numChildren;			if(c_num>0){				for(var i:int = 0;i<c_num;i++){					mc.removeChildAt(0);				}			}		}			}		}