package net.satcy.bitmap{	import flash.display.*;	import flash.geom.*;		import net.satcy.util.LayOutUtil;	public class NoiseReference {		private var bmd:BitmapData;		private var seed:uint;		private var a:Array;		public var fractalNoise:Boolean = true;		public var octave:Number = 1;		public function NoiseReference(_width:Number = 30, _height:Number = 30){									a = new Array();			for (var i:int=0; i<5; i++) {				a.push(new Point());			}			bmd = new BitmapData(_width, _height, false, 0xCCCCCC);						seed = Math.floor(Math.random() * 10)+3;			update();						//net.satcy.util.LayOutUtil.stage.addChild(new Bitmap(bmd));		}		public function getPixelVal(__x, __y):Array{			//trace(bmd);			var pixelValue:uint = bmd.getPixel32(__x, __y);			//trace(pixelValue);			var red:Number = pixelValue >> 16 & 0xFF;			var blue:Number = pixelValue & 0xFF;			red -= 128;			blue -= 128;			var arr:Array = [red, blue];			return arr;		}				public function update():void{			var vy = 0.1;			var vx = -0.1;			a[0].x += 0.10425531914894;			a[0].y += vy;			a[1].x += vx;			a[1].y += vy;			a[2].x += vx;			a[2].y += vy;			a[3].x += vx;			a[3].y += vy;			a[4].x += 0.143971631205674;			a[4].y += 0.1;						//var seed:Number = Math.floor(Math.random() * 10);			var channels:uint = BitmapDataChannel.RED | BitmapDataChannel.BLUE | BitmapDataChannel.GREEN;						bmd.perlinNoise(bmd.width, bmd.height, octave, seed, false, fractalNoise, channels, false, a);		}				public function destroy():void{			bmd.dispose();			bmd = null;			a = null;			delete this;		}				public function get bmp():BitmapData{			return bmd;		}	}			}