package net.satcy.data{	import flash.display.*;	import flash.errors.IllegalOperationError;	import flash.events.*;	import flash.utils.*;		import net.satcy.util.ArrayUtil;	/*		@author satoshi@rhizomatiks.com				@discription   シングルトンです。PreLoadAsset.getInstance() で		@discription 順々に読み込むクラス		@discription   progress中は、最大ファイル数：maxCount、現在のインデックスカウント:count						それぞれのパーセント:percent				@see PreLoadAssetEvent		@see LoadSwfManager	*/	public class PreLoadAsset extends EventDispatcher{		private static var instance:PreLoadAsset = null;    	private static var internallyCalled:Boolean = false;						public  var set_arr:Array = [];		private var count:int = 0;				public var isProgress:Boolean;		public var duration:int = 1;		private var interval_exec:uint = 0;				public function PreLoadAsset(){			if (internallyCalled) {  				//trace("constructor is called");   				internallyCalled = false;			} else {  				throw new IllegalOperationError ("Use Singleton.getInstance() to get the instance");			}		}		public static function getInstance():PreLoadAsset {			if(PreLoadAsset.instance == null) {  				//trace("instance is being created");  				internallyCalled = true;   				instance = new PreLoadAsset();			}			return instance; 		}		////------------------------------------------------------------------method		public function init():void{			set_arr = [];			count = 0;		}				public function add(__str:String):void{			if ( set_arr.indexOf(__str) != -1 ) return;			set_arr.push(__str);		}				public function remove(_str:String):void{			set_arr = ArrayUtil.deleteItems(set_arr, _str);			count--;			count = Math.max(count, 0);		}				public function exec():void {			isProgress = true;			//trace( (new Date()).milliseconds );						if( count > set_arr.length - 1 ){				onEndLoadAll();				return;			}			var t_arr:Array = set_arr[count].split(".");			var footer:String = t_arr[t_arr.length-1];			if ( footer.indexOf("?") != -1 ) footer = footer.split("?")[0];			//trace("PreloadAsset Set New Load File ::: ", count, set_arr[count]);			if ( footer == "swf" || footer == "jpg" || footer == "jpeg" || footer == "png" || footer == "gif" ) {				var li:LoadImage = LoadImage.getInstance();				li.addEventListener(LoadImageEvent.ON_PROGRESS, progressHandler, false, 0, true);				li.loadImage(set_arr[count], nextFunc);			} else if ( footer == "mp3" ) {				var ls:LoadSound = LoadSound.getInstance();				ls.addEventListener(LoadImageEvent.ON_PROGRESS, progressHandler, false, 0, true);				ls.loadStart(set_arr[count], nextFunc);			} else if ( footer == "zip" ) {				var lz:LoadZip = new LoadZip(set_arr[count], nextFunc);				lz.addEventListener(LoadImageEvent.ON_PROGRESS, progressHandler, false, 0, true);			} else if ( footer == "wav" ) {				var lb:LoadBinary = new LoadBinary();				lb.addEventListener(LoadImageEvent.ON_PROGRESS, progressHandler, false, 0, true);				lb.load(set_arr[count], nextFunc);			} else {				nextFunc();			}		}				public function stop():void{			//set_arr = [];			//count = set_arr.length;			//isProgress = false;			count = 0;			isProgress = false;		}				////------------------------------------------------------------------private		private function nextFunc():void{			var li:LoadImage = LoadImage.getInstance();			li.removeEventListener(LoadImageEvent.ON_PROGRESS, progressHandler);						var ls:LoadSound = LoadSound.getInstance();			ls.removeEventListener(LoadImageEvent.ON_PROGRESS, progressHandler);			/*			ArrayUtil.deleteAt( set_arr, 0);			count++;			if( set_arr.length > 0){				var interval:uint = setTimeout(exec, 0);			}else{				onEndLoadAll();			}			*/			if ( !isProgress ) return;			count++;			if( count < set_arr.length ){				interval_exec = setTimeout(exec, duration);			}else{				onEndLoadAll();			}					}				public function progressHandler(event:LoadImageEvent):void {			var r:PreLoadAssetEvent = new PreLoadAssetEvent (PreLoadAssetEvent.ON_PROGRESS);			r.percent = event.percent;			r.maxCount = set_arr.length;			r.count = count;			dispatchEvent (r);///イベント送出        }                private function onEndLoadAll():void{        	init();			isProgress = false;			var r:PreLoadAssetEvent = new PreLoadAssetEvent(PreLoadAssetEvent.ON_COMPLETE);			dispatchEvent(r);///イベント送出        }	}		}