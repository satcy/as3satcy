package net.satcy.data {	import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.net.URLStream;	import flash.utils.ByteArray;		import nochump.util.zip.ZipEntry;	import nochump.util.zip.ZipFile;		public class LoadZip extends EventDispatcher{		private var _stream:URLStream;		private var onCompleteFunc:Function;		private var onError:Function;				public function LoadZip(__path:String, fn:Function, _error:Function = null) {			trace("LoadZip");			onCompleteFunc = fn;			onError = _error;			trace(__path);			_stream = new URLStream();			_stream.addEventListener(Event.COMPLETE, onComplete);			_stream.addEventListener(ProgressEvent.PROGRESS, progressHandler);			_stream.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			if ( __path ) _stream.load(new URLRequest(__path));		}				public function load(req:URLRequest):void{			_stream.load(req);		}		private function onIOError(e:IOErrorEvent):void{			if ( onError == null ) onError();			destroy();		}				private function onComplete(evt:Event):void {			trace("LoadZip::onComplete");			var lsm:LoadSwfManager = LoadSwfManager.getInstance();			var z:ZipFile = new ZipFile(_stream);			var l:int = z.entries.length;			for(var i:int = 0; i < l; i++) {			    var entry:ZipEntry = z.entries[i];						    // extract the entry's data from the zip			    var data:ByteArray = z.getInput(entry);				var file_name:String = entry.name;				var file_name_low:String = file_name.toLowerCase();				if ( file_name.indexOf("__MACOSX") == -1 ) {					if( file_name_low.indexOf(".swf") != -1 || 						file_name_low.indexOf(".jpeg") != -1 || 						file_name_low.indexOf(".jpg") != -1 || 						file_name_low.indexOf(".gif") != -1 || 						file_name_low.indexOf(".png") != -1 ) {						trace(">>>>",file_name);						if(lsm.loadedCheck(file_name) == false){							var loader:Loader = new Loader();							loader.loadBytes(data);							lsm.loadedStore(file_name, loader);						}					}				}			}						if ( onCompleteFunc != null ) onCompleteFunc();			destroy();					}		private function destroy():void{			_stream.removeEventListener(Event.COMPLETE, onComplete);			_stream.removeEventListener(ProgressEvent.PROGRESS, progressHandler);			_stream.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			try { _stream.close(); } catch(e:*) {}			_stream = null;						onCompleteFunc = null;			onError = null;		}				private function progressHandler(event:ProgressEvent):void {			var r:LoadImageEvent = new LoadImageEvent (LoadImageEvent.ON_PROGRESS);			r.percent = Math.floor(event.bytesLoaded/event.bytesTotal*100);			dispatchEvent (r);			this.dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, event.bytesLoaded, event.bytesTotal));        }	}}