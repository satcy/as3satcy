package net.satcy.data{	import flash.display.*;	import flash.errors.IllegalOperationError;	import flash.events.*;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.utils.*;	/*		@author satoshi@rhizomatiks.com		@discription Loader		@see LoadImageEvent.as		@see LoadSwfManager.as	*/	/*	[Event(name="onProgress",type="rzm.LoadImageEvent")]	[Event(name="onComplete",type="rzm.LoadImageEvent")]	*/	public class LoadImageSimple extends EventDispatcher{				//private var lsm:LoadSwfManager = LoadSwfManager.getInstance();		private var filePath:String;		private var loader:Loader;		private var onComplete:Function;		public var onError:Function;		public  var isLoaded:Boolean;				public function LoadImageSimple(){			isLoaded = false;		}				public function loadImage(_t_url:String, fn:Function):void{			filePath = _t_url;			onComplete = fn;			///////////////////SWFの多重読み込み回避			var lsm:LoadSwfManager = LoadSwfManager.getInstance();			if(lsm.loadedCheck(filePath) == false){				loader = new Loader();				configureListeners(loader.contentLoaderInfo);				var loader_context:LoaderContext;				if ( filePath.indexOf(".swf") != -1 ){					loader_context = new LoaderContext(false, ApplicationDomain.currentDomain);				}else{					loader_context = new LoaderContext();				}				loader.load( new URLRequest(filePath), loader_context );			}else{				isLoaded = true;				this.dispatchEvent(new LoadImageEvent(LoadImageEvent.ON_COMPLETE) );				if (onComplete is Function ) onComplete();				onComplete = null;			}		}		private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler, false, 0, true);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler, false, 0, true);            dispatcher.addEventListener(Event.INIT, initHandler, false, 0, true);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler, false, 0, true);            dispatcher.addEventListener(Event.OPEN, openHandler, false, 0, true);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler, false, 0, true);            dispatcher.addEventListener(Event.UNLOAD, unLoadHandler, false, 0, true);        }				private function removeListeners(dispatcher:IEventDispatcher):void {            dispatcher.removeEventListener(Event.COMPLETE, completeHandler);            dispatcher.removeEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.removeEventListener(Event.INIT, initHandler);            dispatcher.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);            dispatcher.removeEventListener(Event.OPEN, openHandler);            dispatcher.removeEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.removeEventListener(Event.UNLOAD, unLoadHandler);        }		private function completeHandler(event:Event):void {            //trace("completeHandler: " + event.target);						removeListeners( loader.contentLoaderInfo );						///////////////////SWFの多重読み込み回避			//var mc = getChildAt(0);			var lsm:LoadSwfManager = LoadSwfManager.getInstance();			lsm.loadedStore(filePath, loader);			//			//loader.unload();			loader = null;						isLoaded = true;						this.dispatchEvent(new LoadImageEvent(LoadImageEvent.ON_COMPLETE) );						if (onComplete is Function ) onComplete();			onComplete = null;			onError = null;        }		private function httpStatusHandler(event:HTTPStatusEvent):void {            //trace("httpStatusHandler: " + event);        }        private function initHandler(event:Event):void {            //trace("initHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            //trace("ioErrorHandler: " + event);        }        private function openHandler(event:Event):void {            //trace("openHandler: " + event);            if ( onError != null ) onError();            onError = null;        }        private function progressHandler(event:ProgressEvent):void {            //trace("progressHandler: bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);			var r:LoadImageEvent = new LoadImageEvent (LoadImageEvent.ON_PROGRESS, true);			r.percent = Math.floor(event.bytesLoaded/event.bytesTotal*100);			dispatchEvent (r);///イベント送出        }        private function unLoadHandler(event:Event):void {            //trace("unLoadHandler: " + event);        }	}	}