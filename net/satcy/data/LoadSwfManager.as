package net.satcy.data{	import flash.display.*;	import flash.errors.IllegalOperationError;	import flash.utils.*;		import net.satcy.util.ArrayUtil;	/*		@author satoshi@rhizomatiks.com		@discription 読み込んだものを貯めておくクラス		@see LoadImage.as		@see LoadImageEvent.as	*/	public class LoadSwfManager{		private static var instance:LoadSwfManager = null;    	private static var internallyCalled:Boolean = false;			private var loaded_arr:Array = new Array();		private var obj_arr:Dictionary = new Dictionary(true);				public function LoadSwfManager(){//////シングルトンで実装してます。		/*呼び出し方		var lsm:LoadSwfManager = LoadSwfManager.getInstance();		lsm.loadedCheck(_url);		どこからでも、同じものを参照できる。		のような感じで。		*/			if (internallyCalled) {  				trace("LoadSwfManager constructor is called");   				internallyCalled = false;   			} else {  				throw new IllegalOperationError ("Use Singleton.getInstance() to get the instance");			}		}				public static function getInstance():LoadSwfManager {			if(LoadSwfManager.instance == null) {  				trace("instance is being created");  				internallyCalled = true;   				instance = new LoadSwfManager();			}			return instance; 		}				public function loadedCheck(str:String):Boolean{			var path:String = str.split("?")[0];			var num:uint = loaded_arr.length;			var bool:Boolean = false;			for(var i:int = 0; i<num;i++){				if(loaded_arr[i] == path){					bool = true;					break;				}			}			if ( bool && getLoadedObject(path).numChildren == 0 ) bool = false;			return bool;					}		public function loadedStore(str:String, mc:Loader):void{			var path:String = str.split("?")[0];			loaded_arr.push(path);			obj_arr[path] = mc;		}				public function getLoadedObject(str:String):Loader{			return obj_arr[str];		}				public function bitmapData(str:String):BitmapData{			if ( getLoadedObject(str).content is Bitmap ) {				return Bitmap(getLoadedObject(str).content).bitmapData;			} else {				return null;			}		}				public function deleteObject(str:String):Boolean{			var bool:Boolean = false;			if ( obj_arr[str] != null ){				var ld:Loader = obj_arr[str];				//log(ld.content, ld);				if ( ld.content == null ) return false;				//trace(ld.content.parent, ld.parent );				if ( !(ld.content.parent is Loader) ){					bool = false;				}else{					//ld.contentLoaderInfo.addEventListener(Event.UNLOAD, function(e:Event):void{trace("UNLOADED>>>>>>>>>>"+e);}, false, 0, true);					loaded_arr = ArrayUtil.deleteItems(loaded_arr, str);					if ( obj_arr[ str ] != null ) delete obj_arr[ str ];					bool = true;					ld.unload();					ld = null;				}			}			return bool;		}				public function destroy():void{			var num:uint = loaded_arr.length;			var ld:Loader;			for(var i:int = 0; i<num;i++){				ld = getLoadedObject( loaded_arr[i] );				if ( !(ld.content.parent is Loader) || ld.parent != null ){				}else{ ld.unload(); }				ld = null;				delete obj_arr[ loaded_arr[i] ];			}			loaded_arr = [];			obj_arr = new Dictionary(true);			LoadSwfManager.instance = null;		}				public function print():void{			trace(loaded_arr);		}	}}