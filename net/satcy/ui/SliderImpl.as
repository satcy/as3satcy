package net.satcy.ui{		import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;		import net.satcy.display.DisplayObjectUtils;	import net.satcy.ui.MouseWheel;	import net.satcy.util.EnterFrame;	import net.satcy.util.LayOutUtil;	import net.satcy.util.MouseEventUtil;	import net.satcy.view.IView;	import net.satcy.view.View;	public class SliderImpl extends EventDispatcher{		public static const HORIZONTAL:int = 0;		public static const VERTICAL:int = 1;				private var target_pos:String = "x";		private var target_geom:String = "width";		private var target_mouse:String = "mouseX";				private var slider_bg_height:Number = 0;		public var ratio:Number = 0;				private var min_y:Number;				private var offset_y:Number = 0;				private var bg_mc:Sprite;		private var bar_mc:Sprite;				public var isDrag:Boolean = false;				public var useWheel:Boolean = false;				private var mw:MouseWheel;				public function SliderImpl(_nob_mc:Sprite, _bg_mc:Sprite = null, _type:int = 0)		{			super();			if ( _bg_mc ) bg_mc = _bg_mc;						if ( _type == VERTICAL ) {				target_pos = "y";				target_geom = "height";				target_mouse = "mouseY";			}						bar_mc = _nob_mc;		}				public function show():void{			MouseEventUtil.adds(bar_mc, true, {over:onOver, down:onDown});			if (bg_mc) MouseEventUtil.adds(bg_mc, true, {click:onClickBg});						if ( useWheel ){				mw = new MouseWheel();				mw.addEventListener(MouseEvent.MOUSE_WHEEL, onWheelHandler);			}		}				public function hide():void{			MouseEventUtil.removes(bar_mc);			if (bg_mc) MouseEventUtil.removes(bg_mc);			EnterFrame.remove(this);						if ( useWheel ){				mw.removeEventListener(MouseEvent.MOUSE_WHEEL, onWheelHandler);				mw = null;			}		}				public function setProp(_slider_bg_height:Number, _min_y:Number):void{						slider_bg_height = _slider_bg_height;			min_y = _min_y;						//if ( bg_mc ) bg_mc[target_geom] = slider_bg_height;						if ( !isDrag ) {				moveToByRatio(ratio);			}					}				public function setToByRatio(_ratio:Number):Number{			return setTo(_ratio*(slider_bg_height)+min_y);		}				public function setTo(_y:Number):Number{			var t_y:Number = _y;						if ( t_y > this.slider_bg_height+min_y ) t_y = this.slider_bg_height+min_y;			if ( t_y < min_y ) t_y = min_y;						//this.bar_mc.y = t_y;			ratio = (t_y-min_y)/(slider_bg_height);			return t_y;		}		public function moveTo(_y:Number):void{			setTo(_y);			this.dispatchEvent(new SliderEvent(SliderEvent.ON_CHANGE, ratio));		}				public function moveToByRatio(_ratio:Number):void{			setToByRatio(_ratio);			this.dispatchEvent(new SliderEvent(SliderEvent.ON_CHANGE, ratio));		}				private function onEnterFrameHandler(e:Event):void{						moveTo(this.bar_mc.parent[target_mouse]-offset_y);		}				private function onOver(e:MouseEvent):void{			//this.filters = [new DropShadowFilter(1, 45,0,0.33,4,4)];		}				private function onDown(e:MouseEvent):void{			MouseEventUtil.removes(bar_mc);			EnterFrame.add(this, onEnterFrameHandler);			LayOutUtil.stage.removeEventListener(MouseEvent.MOUSE_UP, onUp);			LayOutUtil.stage.addEventListener(MouseEvent.MOUSE_UP, onUp);			offset_y = this.bar_mc[target_mouse];			isDrag = true;		}				private function onUp(e:MouseEvent):void{			LayOutUtil.stage.removeEventListener(MouseEvent.MOUSE_UP, onUp);			MouseEventUtil.adds(bar_mc, true, {over:onOver, down:onDown});			EnterFrame.remove(this);			isDrag = false;		}				private function onClickBg(e:MouseEvent):void{			if ( bg_mc ) moveTo(bg_mc.parent[target_mouse] - bar_mc[target_geom]*0.5);		}				public function destroy():void{			MouseEventUtil.removes(bar_mc);			EnterFrame.remove(this);			LayOutUtil.stage.removeEventListener(MouseEvent.MOUSE_UP, onUp);						bar_mc = null;						if ( bg_mc ){				MouseEventUtil.removes(bg_mc);				bg_mc = null;			}						if ( mw ) {				mw.removeEventListener(MouseEvent.MOUSE_WHEEL, onWheelHandler);				mw = null;			}		}				private function onWheelHandler(e:MouseEvent):void{			if ( e.delta > 0 ) {				this.moveToByRatio(ratio-0.05);			}else{				this.moveToByRatio(ratio+0.05);			}		}	}}